/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.webauthn4j.extras.fido.metadata.statement;

import com.webauthn4j.extras.fido.metadata.FIDOMDSClient;
import com.webauthn4j.registry.Registry;
import org.junit.Before;
import org.junit.Test;

import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.HashMap;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class FIDOMDSMetadataStatementProviderTest {

    private FIDOMDSClient fidoMDSClient = mock(FIDOMDSClient.class);
    private FIDOMDSMetadataStatementProvider target = new FIDOMDSMetadataStatementProvider(new Registry(), fidoMDSClient);
    private OffsetDateTime now = OffsetDateTime.now(ZoneOffset.UTC);

    @Before
    public void setup(){
        String toc = "eyJhbGciOiAiRVMyNTYiLCAidHlwIjogIkpXVCIsICJ4NWMiOiBbIk1JSUNuRENDQWtLZ0F3SUJBZ0lOQWV3Y2pYMHludXpIendKd2F6QUtCZ2dxaGtqT1BRUURBakJUTVFzd0NRWURWUVFHRXdKVlV6RVdNQlFHQTFVRUNoTU5Sa2xFVHlCQmJHeHBZVzVqWlRFZE1Cc0dBMVVFQ3hNVVRXVjBZV1JoZEdFZ1ZFOURJRk5wWjI1cGJtY3hEVEFMQmdOVkJBTVRCRU5CTFRFd0hoY05NVGd3TkRFNE1EQXdNREF3V2hjTk1qRXdOREU0TURBd01EQXdXakJrTVFzd0NRWURWUVFHRXdKVlV6RVdNQlFHQTFVRUNoTU5Sa2xFVHlCQmJHeHBZVzVqWlRFZE1Cc0dBMVVFQ3hNVVRXVjBZV1JoZEdFZ1ZFOURJRk5wWjI1cGJtY3hIakFjQmdOVkJBTVRGVTFsZEdGa1lYUmhJRlJQUXlCVGFXZHVaWElnTXpCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMElBQklwZjZuZGJhUFVaWGlWRENmc2RjMlBpV0gxN2JBQnJvbjIwRWhDRnRCT1NveTgxa2FjZkU2ZnZKTm5jMmxnN2xrWldDdjljTHJxcVdMc0ZZRHlPQk4ramdla3dnZVl3RGdZRFZSMFBBUUgvQkFRREFnYkFNQXdHQTFVZEV3RUIvd1FDTUFBd0hRWURWUjBPQkJZRUZGeVEwWDdQUEV5NHUrYjZwR010NGxCL1FQRExNQjhHQTFVZEl3UVlNQmFBRkdrUlhpMXBaSVdkbHJqVy8xek52engxejB3WU1EVUdBMVVkSHdRdU1Dd3dLcUFvb0NhR0pHaDBkSEE2THk5dFpITXVabWxrYjJGc2JHbGhibU5sTG05eVp5OURRUzB4TG1OeWJEQlBCZ05WSFNBRVNEQkdNRVFHQ3lzR0FRUUJndVVjQVFNQk1EVXdNd1lJS3dZQkJRVUhBZ0VXSjJoMGRIQnpPaTh2YldSekxtWnBaRzloYkd4cFlXNWpaUzV2Y21jdmNtVndiM05wZEc5eWVUQUtCZ2dxaGtqT1BRUURBZ05JQURCRkFpRUFsRzI2cU9PTHUzcGt5Q1RoQUV4eEpwTDZsL1YvVVlReStHRGNRMk10Y3EwQ0lHUllHYUZWbThFbmdhOGE5TGUzQ2lMcCt0YzJOM09jR21QQk9VeTdwSTZ0IiwgIk1JSUNzakNDQWppZ0F3SUJBZ0lPUnFteGs4TlF1SmZDRU5WWWExUXdDZ1lJS29aSXpqMEVBd013VXpFTE1Ba0dBMVVFQmhNQ1ZWTXhGakFVQmdOVkJBb1REVVpKUkU4Z1FXeHNhV0Z1WTJVeEhUQWJCZ05WQkFzVEZFMWxkR0ZrWVhSaElGUlBReUJUYVdkdWFXNW5NUTB3Q3dZRFZRUURFd1JTYjI5ME1CNFhEVEUxTURZeE56QXdNREF3TUZvWERUUXdNRFl4TnpBd01EQXdNRm93VXpFTE1Ba0dBMVVFQmhNQ1ZWTXhGakFVQmdOVkJBb1REVVpKUkU4Z1FXeHNhV0Z1WTJVeEhUQWJCZ05WQkFzVEZFMWxkR0ZrWVhSaElGUlBReUJUYVdkdWFXNW5NUTB3Q3dZRFZRUURFd1JEUVMweE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRTlzRGdDOFB6QllsL3dLcXBYZmE5OGpPSW83OGw5cHo0eE96R0RHSXowekVYTVhzQlk2a0FoeVU0R1JtVDB3bzR0eVV2eDVCWThPS2xzTE16bGJLTVJhT0I3ekNCN0RBT0JnTlZIUThCQWY4RUJBTUNBUVl3RWdZRFZSMFRBUUgvQkFnd0JnRUIvd0lCQURBZEJnTlZIUTRFRmdRVWFSRmVMV2xraFoyV3VOYi9YTTIvUEhYUFRCZ3dId1lEVlIwakJCZ3dGb0FVMHFVZkM2ZjJZc2hBMU5pOXVkZU8wVlM3dkVZd05RWURWUjBmQkM0d0xEQXFvQ2lnSm9Za2FIUjBjRG92TDIxa2N5NW1hV1J2WVd4c2FXRnVZMlV1YjNKbkwxSnZiM1F1WTNKc01FOEdBMVVkSUFSSU1FWXdSQVlMS3dZQkJBR0M1UndCQXdFd05UQXpCZ2dyQmdFRkJRY0NBUlluYUhSMGNITTZMeTl0WkhNdVptbGtiMkZzYkdsaGJtTmxMbTl5Wnk5eVpYQnZjMmwwYjNKNU1Bb0dDQ3FHU000OUJBTURBMmdBTUdVQ01CTFZxMEpkV3YyeVk0UnAxSWl5SVZXRUtHMVBUejFwUEFGcUVuYWtQdHc0Uk1SVEd3SGRiMmlmY0RiUG9Fa2ZZUUl4QU9Ma2ZFUGoyMmZCbmVqMXd0Z3l5bHN1NzNyS0xVdjR4aER5OVRBZVZVbWwwaURCTThTdEU0RGlWcy80ZWpGaHFRPT0iXX0..87kNV5Zr3ccpmiEEjj1pEfJx2U6KCSs4fZYB3E5BJpjYshKUlTDm2OPDrWL6XDsadczpBUVsT-x5A7bgfrkNBw";
        when(fidoMDSClient.fetchMetadataTOC()).thenReturn(toc);
    }

    @Test
    public void needsRefresh_test_with_cache_null() {
        target.cachedMetadataMap = null;
        assertThat(target.needsRefresh()).isTrue();
    }

    @Test
    public void needsRefresh_test_with_future_nextUpdate() {
        target.cachedMetadataMap = new HashMap<>();
        target.nextUpdate = now.plusDays(1);
        target.lastRefresh = now.minusWeeks(1);

        assertThat(target.needsRefresh()).isFalse();
    }

    @Test
    public void needsRefresh_test_with_equal_nextUpdate_and_lastRefresh_within_one_hour() {
        target.cachedMetadataMap = new HashMap<>();
        target.nextUpdate = now;
        target.lastRefresh = now.minusMinutes(59);

        assertThat(target.needsRefresh()).isFalse();
    }

    @Test
    public void needsRefresh_test_with_past_nextUpdate() {
        target.cachedMetadataMap = new HashMap<>();
        target.nextUpdate = now.minusDays(1);
        target.lastRefresh = now.minusWeeks(1);

        assertThat(target.needsRefresh()).isTrue();
    }

    @Test
    public void fetchMetadataTOCPayload_test(){
        target.fetchMetadataTOCPayload();
    }
}
